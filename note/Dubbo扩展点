Dubbo会为每一个扩展创建一个自适应实例。如果扩展类上有@Adaptive，会使用该类作为自适应类。如果没有，Dubbo会创建一个。

在Dubbo中，有一个特殊的类，被称为Wrapper类。通过装饰器模式，使用装饰器模式，使用包装类包装原始的扩展点实例，在原始扩展点实现
前后插入其他逻辑，实现AOP功能。

Wrapper类是一个有复制构造函数的类。构造函数的参数类型是扩展点接口，而不是扩展类。


扩展点自适应：
    Dubbo需要在运行时根据方法参数来决定该使用哪个扩展，其实是一个扩展点的代理，将扩展点的选择从
    Dubbo启动时，延迟到RPC调用。Dubbo中每个扩展点都有一个自适应类，如果没有显示提供，Dubbo会自动
    创建一个，默认使用javaassist。
    通过url解析出参数，解析的逻辑由@Adaptive的value参数控制，然后根据得到的扩展点名称，进行扩展点的调用。



